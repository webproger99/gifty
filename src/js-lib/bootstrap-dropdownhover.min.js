/*!
 * Dropdownhover v1.0.0 (http://bs-dropdownhover.kybarg.com)
 */
+(function (o) {
  function t(t) { return this.each(function () { const e = o(this); let r = e.data("bs.dropdownhover"); const i = e.data(); void 0 !== e.data("animations") && e.data("animations") !== null && (i.animations = o.isArray(i.animations) ? i.animations : i.animations.split(" ")); const s = o.extend({}, n.DEFAULTS, i, typeof t === "object" && t); r || e.data("bs.dropdownhover", r = new n(this, s)); }); } var n = function (t, n) { this.options = n, this.$element = o(t); const e = this; this.dropdowns = this.$element.hasClass("dropdown-toggle") ? this.$element.parent().find(".dropdown-menu").parent(".dropdown") : this.$element.find(".dropdown"), this.dropdowns.each(function () { o(this).on("mouseenter.bs.dropdownhover", function (t) { e.show(o(this).children("a, button")); }); }), this.dropdowns.each(function () { o(this).on("mouseleave.bs.dropdownhover", function (t) { e.hide(o(this).children("a, button")); }); }); }; n.TRANSITION_DURATION = 300, n.DELAY = 150, n.TIMEOUT, n.DEFAULTS = {animations: ["fadeInDown", "fadeInRight", "fadeInUp", "fadeInLeft"]}, n.prototype.show = function (t) { const e = o(t); window.clearTimeout(n.TIMEOUT), o(".dropdown").not(e.parents()).each(function () { o(this).removeClass("open"); }); let r = this.options.animations[0]; if (!e.is(".disabled, :disabled")) { const i = e.parent(); const s = i.hasClass("open"); if (!s) { const d = e.next(".dropdown-menu"); i.addClass("open"); const a = this.position(d); r = a == "top" ? this.options.animations[2] : a == "right" ? this.options.animations[3] : a == "left" ? this.options.animations[1] : this.options.animations[0], d.addClass(`animated ${r}`); const h = o.support.transition && d.hasClass("animated"); h ? d.one("bsTransitionEnd", function () { d.removeClass(`animated ${r}`); }).emulateTransitionEnd(n.TRANSITION_DURATION) : d.removeClass(`animated ${r}`); } return !1; } }, n.prototype.hide = function (t) { const e = o(t); const r = e.parent(); n.TIMEOUT = window.setTimeout(function () { r.removeClass("open"); }, n.DELAY); }, n.prototype.position = function (t) {
    const n = o(window); t.css({
      bottom: "", left: "", top: "", right: "",
    }).removeClass("dropdownhover-top"); const e = {top: n.scrollTop(), left: n.scrollLeft()}; e.right = e.left + n.width(), e.bottom = e.top + n.height(); const r = t.offset(); r.right = r.left + t.outerWidth(), r.bottom = r.top + t.outerHeight(); const i = t.position(); i.right = r.left + t.outerWidth(), i.bottom = r.top + t.outerHeight(); let s = ""; const d = t.parents(".dropdown-menu").length; if (d)i.left < 0 ? (s = "left", t.removeClass("dropdownhover-right").addClass("dropdownhover-left")) : (s = "right", t.addClass("dropdownhover-right").removeClass("dropdownhover-left")), r.left < e.left ? (s = "right", t.css({left: "100%", right: "auto"}).addClass("dropdownhover-right").removeClass("dropdownhover-left")) : r.right > e.right && (s = "left", t.css({left: "auto", right: "100%"}).removeClass("dropdownhover-right").addClass("dropdownhover-left")), r.bottom > e.bottom ? t.css({bottom: "auto", top: -(r.bottom - e.bottom)}) : r.top < e.top && t.css({bottom: -(e.top - r.top), top: "auto"}); else { const a = t.parent(".dropdown"); const h = a.offset(); h.right = h.left + a.outerWidth(), h.bottom = h.top + a.outerHeight(), r.right > e.right && t.css({left: -(r.right - e.right), right: "auto"}), r.bottom > e.bottom && h.top - e.top > e.bottom - h.bottom || t.position().top < 0 ? (s = "top", t.css({bottom: "100%", top: "auto"}).addClass("dropdownhover-top").removeClass("dropdownhover-bottom")) : (s = "bottom", t.addClass("dropdownhover-bottom")); } return s;
  }; const e = o.fn.dropdownhover; o.fn.dropdownhover = t, o.fn.dropdownhover.Constructor = n, o.fn.dropdownhover.noConflict = function () { return o.fn.dropdownhover = e, this; }; let r; o(document).ready(function () { o(window).width() >= 768 && o("[data-hover=\"dropdown\"]").each(function () { const n = o(this); t.call(n, n.data()); }); }), o(window).on("resize", function () {
    clearTimeout(r), r = setTimeout(function () {
      o(window).width() >= 768 ? o("[data-hover=\"dropdown\"]").each(function () { const n = o(this); t.call(n, n.data()); }) : o("[data-hover=\"dropdown\"]").each(function () {
        o(this).removeData("bs.dropdownhover"), o(this).hasClass("dropdown-toggle") ? o(this).parent(".dropdown").find(".dropdown").andSelf()
          .off("mouseenter.bs.dropdownhover mouseleave.bs.dropdownhover") : o(this).find(".dropdown").off("mouseenter.bs.dropdownhover mouseleave.bs.dropdownhover");
      });
    }, 200);
  });
}(jQuery));
